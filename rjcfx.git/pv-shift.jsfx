desc: rjc Phase Vocoder Frequency Shifter

import cookdsp.jsfx-inc

slider1:5<0,8,1{32,64,128,256,512,1024,2048,4096,8192}>PV Size
slider2:1<0,2,1{2,4,8}>Overlaps
slider3:0<-2000,2000, 0.1>Amount Of Shifting In Hz

@init
size = pow(2, slider1+5);
olaps = pow(2, slider2+1);
pin.pvin(size, olaps);
pin2.pvin(size, olaps);
pout.pvout(size, olaps);
pout2.pvout(size, olaps);
pvs.pvshift(slider3, size/2);
pvs2.pvshift(-1*slider3, size/2);

@slider
size = pow(2, slider1+5);
olaps = pow(2, slider2+1);
// If size or overlaps changed, re-initialize PVs.
size != pin.size || olaps != pin.olaps ? (
pin.pvin_resize(size, olaps);
pin2.pvin_resize(size, olaps);
pout.pvout_resize(size, olaps);
pout2.pvout_resize(size, olaps);
// Initialize effect's specific memories here...
pvs.pvshift_resize(size/2);
pvs2.pvshift_resize(size/2);
);
// Process effect's specific sliders here...
pvs.pvshift_set_shift(slider3);
pvs2.pvshift_set_shift(slider3);

@sample
// Input / Output
pin.pvin_do(spl0);
pin2.pvin_do(spl1);
spl0 = pout.pvout_get_output(pin.count);
spl1 = pout2.pvout_get_output(pin2.count);

pin.ready ? (
pvs.pvshift_do(pin.magn, pin.freq);
pvs2.pvshift_do(pin2.magn, pin2.freq);
pout.pvout_do(pvs.magn, pvs.freq);
pout2.pvout_do(pvs2.magn, pvs2.freq);
);
