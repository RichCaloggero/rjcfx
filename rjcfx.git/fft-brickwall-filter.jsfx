desc:fft brickwall filter

import cookdsp.jsfx-inc

// FFT parameters (only FFT Size for the example).
slider1:5<0,8,1{32,64,128,256,512,1024,2048,4096,8192}>FFT Size
slider2:1<0,2,1{2,4,8}>overlap
slider3:1<0,3,1{hamming,hanning,bartlett,blackman}>Window Shape
// Effect's specific sliders.
slider4:1000<50.0, 18000.0>Filter Frequency
slider5:0<0,1,1{Lowpass,Highpass}>Filter Type

@init

size = pow(2, slider1+5);
fin.fftin(size, slider2);
fin2.fftin(size, slider2);
fout.fftout(size, slider2);
fout2.fftout(size, slider2);
brk.fftbrick(slider4, slider3, size/5);
brk2.fftbrick(slider4, slider5, size/2);

@slider
size = pow(2, slider1+5);
// If size changed, re-initialize FFTs.
size != fin.size ? (
fin.fftin_resize(size, slider2);
fin2.fftin_resize(size, slider2);
fout.fftout_resize(size, slider2);
fout2.fftout_resize(size, slider2);
// Initialize effect's specific memories.
brk.fftbrick_resize(size/2);
brk2.fftbrick_resize(size/2);
);
// If cutoff frequency changed.
slider4 != brk.freq ? (
brk.fftbrick_set_freq(slider4);
brk2.fftbrick_set_freq(slider4);
);
brk.fftbrick_set_type(slider5);
brk2.fftbrick_set_type(slider5);

/*pdc_bot_ch = 0;
pdc_top_ch = 2;
pdc_delay = size-slider2;
*/

@sample
// Input / Output
fin.fftin_do(spl0);
fin2.fftin_do(spl1);
spl0 = fout.fftout_get_output(fin.count);
spl1 = fout2.fftout_get_output(fin2.count);

fin.ready ? (
// New buffers ready for processing.
brk.fftbrick_do(fin.real, fin.imag);
brk2.fftbrick_do(fin2.real, fin2.imag);
// compute the inverse FFT.
fout.fftout_do(brk.real, brk.imag);
fout2.fftout_do(brk2.real, brk2.imag);
);
