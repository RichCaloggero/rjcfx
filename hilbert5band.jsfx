desc: 5 band hilbert transform

import cookdsp.jsfx-inc

slider1:s_shift=0.3<0.0, 1.0, 0.01>Shifting Frequency (Hz)
slider2:s_mix=0.3<0,1,0.05>Mix
slider3:s_phase=0.15<0.0,1.0,0.05>Phase
slider4:s_manual=0<0, 1, 0.01>Manual shift
slider5:s_multiband=1<0, 1, 1{off, on}>Multiband


@init

// use with namespace (dot notation)
function do (left, right, phase, manual) 
local (input, ph1, ph2, q1, q2, mod1, mod2, up, down) (
input = 0.5 * (left + right);

// Complex phase
ph1 = manual> 0 ? manual : ph.phasor_do();
ph2 = wrap(ph1+s_phase, 0, 1);

// Complex sinusoid
q1 = sin(2 * $pi * ph1);
q2 = sin(2 * $pi * ph2);

// Hilbert transform
hilb.hilbert_do(input);

// Complex modulation
mod1 = hilb.real * q1;
mod2 = hilb.imag * q2;

// Sideband separation
this.down = mod1 + mod2;
this.up = mod1 - mod2;

// Mix the sideband with input signal
);

band1 = 250;
band2 = 500;
band3 = 1000;
band4 = 2000;
band5 = 4000;

bw1 = 2*band1;
bw2 = 2*band2;
bw3 = 2*band3;
bw4 = 2*band4;
bw5 = 2*band5;

wet_gain = s_mix;
dry_gain = 1 - abs(s_mix);
output_gain = 2 - abs(wet_gain - dry_gain);

b1left.butbp(band1, 1/bw1);
b1right.butbp(band1, 1/bw1);

b2left.butbp(band2, 1/bw2);
b2right.butbp(band2, 1/bw2);

b3left.butbp(band3, 1/bw3);
b3right.butbp(band3, 1/bw3);

b4left.butbp(band4, 1/bw4);
b4right.butbp(band4, 1/bw4);

b5left.butbp(band5, 1/bw5);
b5right.butbp(band5, 1/bw5);

// Initializes the Hilbert transform
hilb.hilbert();
// Sinusoid phase
ph.phasor(s_shift, 0);

@slider
wet_gain = s_mix;
s_multiband === 1 ? wet_gain = 0.2 * wet_gain;
dry_gain = 1 - abs(s_mix);
output_gain = 2 - abs(wet_gain - dry_gain);

ph.phasor_set_freq(s_shift);

@sample
up = 0;
down = 0;

s_multiband === 0 ? (
run.do(spl0, spl1, s_phase, s_manual);
up += run.up;
down += run.down;
) : (
run.do(b1left.butbp_do(spl0), b1right.butbp_do(spl1), s_phase, s_manual);
up += run.up;
down += run.down;

run.do(b2left.butbp_do(spl0), b2right.butbp_do(spl1), s_phase, s_manual);
up += run.up;
down += run.down;

run.do(b3left.butbp_do(spl0), b3right.butbp_do(spl1), s_phase, s_manual);
up += run.up;
down += run.down;

run.do(b4left.butbp_do(spl0), b4right.butbp_do(spl1), s_phase, s_manual);
up += run.up;
down += run.down;

run.do(b5left.butbp_do(spl0), b5right.butbp_do(spl1), s_phase, s_manual);
up += run.up;
down += run.down;
);

spl0 = output_gain * (dry_gain * spl0 + wet_gain * up);
spl1 = output_gain * (dry_gain * spl1 - wet_gain * down);
